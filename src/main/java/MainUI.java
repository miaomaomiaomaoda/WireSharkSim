import org.pcap4j.core.NotOpenException;
import org.pcap4j.core.PcapNativeException;
import org.pcap4j.core.PcapNetworkInterface;
import org.pcap4j.packet.Packet;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.InputEvent;
import java.io.File;
import java.util.Objects;

/**
 * function:主界面
 *
 * @author ZERONJ
 */
public class MainUI extends JFrame {
    private static PcapNetworkInterface nif;
    private PacketCapture packetCapture;
    private PacketList allPackets;
    private final PacketTable packetTable;
    private PacketTree packetTree;
    private Thread captureThread;
    private final JFileChooser fileChooser;
    public static int packetOrder = 0;

    /**
     * function：create new form
     */
    public MainUI() {
        initComponents();
        //设定文件默认目录
        fileChooser = new JFileChooser();
        FileNameExtensionFilter filter=new FileNameExtensionFilter("*.pcap","pcap");
        fileChooser.setFileFilter(filter);
        fileChooser.setMultiSelectionEnabled(false);
        if (System.getProperty(MainUI.INIT_DIR) != null && !System.getProperty(MainUI.INIT_DIR).isEmpty()) {
            fileChooser.setCurrentDirectory(new File(System.getProperty(MainUI.INIT_DIR)));
        }
        allPackets = new PacketList();
        packetTable = new PacketTable(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        jToolBar1 = new JToolBar();
        btnOpenFile = new JButton();
        btnSaveFile = new JButton();
        jSeparator3 = new JToolBar.Separator();
        btnStart = new JButton();
        btnStop = new JButton();
        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        txtFilter = new JTextField();
        btnFilter = new JButton();
        jScrollPane1 = new JScrollPane();
        table = new JTable();
        jScrollPane2 = new JScrollPane();
        analysisTextArea = new JTextArea();
        jScrollPane3 = new JScrollPane();
        packetBytes = new JTextArea();
        lblStatus = new JLabel();
        jMenuBar1 = new JMenuBar();
        mFile = new JMenu();
        openFile = new JMenuItem();
        jSeparator1 = new JPopupMenu.Separator();
        saveFile = new JMenuItem();
        jSeparator2 = new JPopupMenu.Separator();
        quit = new JMenuItem();
        mCapturing = new JMenu();
        setInterface = new JMenuItem();
        jSeparator5 = new JPopupMenu.Separator();
        start = new JMenuItem();
        jSeparator4 = new JPopupMenu.Separator();
        stop = new JMenuItem();
        mHelp = new JMenu();
        about = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("仿Wireshark网络嗅探器");
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing();
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnOpenFile.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/open.png"))));
        btnOpenFile.setText("打开文件");
        btnOpenFile.setToolTipText("打开文件");
        btnOpenFile.setFocusable(false);
        btnOpenFile.setHorizontalTextPosition(SwingConstants.CENTER);
        btnOpenFile.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnOpenFile.addActionListener(this::btnOpenFileActionPerformed);
        jToolBar1.add(btnOpenFile);

        btnSaveFile.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/save.png"))));
        btnSaveFile.setText("保存文件");
        btnSaveFile.setToolTipText("保存文件");
        btnSaveFile.setFocusable(false);
        btnSaveFile.setHorizontalTextPosition(SwingConstants.CENTER);
        btnSaveFile.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnSaveFile.addActionListener(this::btnSaveFileActionPerformed);
        jToolBar1.add(btnSaveFile);
        jToolBar1.add(jSeparator3);

        btnStart.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/start.png"))));
        btnStart.setText("开始抓包");
        btnStart.setToolTipText("开始抓包");
        btnStart.setFocusable(false);
        btnStart.setHorizontalTextPosition(SwingConstants.CENTER);
        btnStart.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnStart.addActionListener(this::btnStartActionPerformed);
        jToolBar1.add(btnStart);

        btnStop.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/stop.png"))));
        btnStop.setText("停止抓包");
        btnStop.setToolTipText("停止抓包");
        btnStop.setEnabled(false);
        btnStop.setFocusable(false);
        btnStop.setHorizontalTextPosition(SwingConstants.CENTER);
        btnStop.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnStop.addActionListener(this::btnStopActionPerformed);
        jToolBar1.add(btnStop);

        jLabel1.setFont(new Font("宋体", Font.PLAIN, 14));
        jLabel1.setText(" 过滤器：");
        txtFilter.setFont(new Font("宋体", Font.PLAIN, 14));
        txtFilter.setHorizontalAlignment(JTextField.LEFT);
        txtFilter.setDragEnabled(true);
        txtFilter.setPreferredSize(new Dimension(100, 21));

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(115, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilter, GroupLayout.PREFERRED_SIZE, 374, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtFilter, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jToolBar1.add(jPanel1);

        btnFilter.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/filter.png"))));
        btnFilter.setToolTipText("应用");
        btnFilter.setFocusable(false);
        btnFilter.setHorizontalTextPosition(SwingConstants.CENTER);
        btnFilter.setVerticalTextPosition(SwingConstants.BOTTOM);
        btnFilter.addActionListener(this::btnFilterActionPerformed);
        jToolBar1.add(btnFilter);

        table.setAutoCreateRowSorter(true);
        table.setFont(new Font("宋体", Font.PLAIN, 14));
        table.setModel(new DefaultTableModel(
                new Object[][]{
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                },
                new String[]{"编号", "时间", "源地址", "目标地址", "协议", "长度"}
        ));
        table.setShowHorizontalLines(false);
        table.setShowVerticalLines(false);
        DefaultTableCellRenderer dc = new DefaultTableCellRenderer();
        dc.setHorizontalAlignment(JLabel.CENTER);
        table.setDefaultRenderer(Object.class, dc);
        jScrollPane1.setViewportView(table);

        analysisTextArea.setFont(new Font("宋体", Font.PLAIN, 14));
        analysisTextArea.setText("测试");
        analysisTextArea.setEditable(false);
        jScrollPane2.setViewportView(analysisTextArea);

        packetBytes.setColumns(20);
        packetBytes.setFont(new Font("Monospaced", Font.PLAIN, 14));
        packetBytes.setRows(5);
        packetBytes.setText("以16进制字符显示包的详细信息");
        jScrollPane3.setViewportView(packetBytes);

        lblStatus.setText("欢迎您通过本软件学习抓包和协议分析......");

        jMenuBar1.setFont(new Font("Microsoft YaHei UI", Font.PLAIN, 14));

        mFile.setText("文件");
        mFile.setFont(new Font("Microsoft YaHei UI", Font.PLAIN, 14));

        openFile.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, InputEvent.ALT_DOWN_MASK));
        openFile.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/open.png"))));
        openFile.setText("打开包文件...");
        openFile.setHorizontalAlignment(SwingConstants.LEFT);
        openFile.addActionListener(this::openFileActionPerformed);
        mFile.add(openFile);
        mFile.add(jSeparator1);

        saveFile.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, InputEvent.ALT_DOWN_MASK));
        saveFile.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/save.png"))));
        saveFile.setText("保存包文件...");
        saveFile.addActionListener(this::saveFileActionPerformed);
        mFile.add(saveFile);
        mFile.add(jSeparator2);

        quit.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, InputEvent.ALT_DOWN_MASK));
        quit.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/exit.png"))));
        quit.setText("退出");
        quit.addActionListener(this::quitActionPerformed);
        mFile.add(quit);

        jMenuBar1.add(mFile);
        mCapturing.setText("抓包");
        mCapturing.setFont(new Font("Microsoft YaHei UI", Font.PLAIN, 14));

        setInterface.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, InputEvent.ALT_DOWN_MASK));
        setInterface.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/interface.png"))));
        setInterface.setText("网络接口...");
        setInterface.addActionListener(this::setInterfaceActionPerformed);
        mCapturing.add(setInterface);
        mCapturing.add(jSeparator5);

        start.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, InputEvent.ALT_DOWN_MASK));
        start.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/start.png"))));
        start.setText("开始抓包");
        start.addActionListener(this::startActionPerformed);
        mCapturing.add(start);
        mCapturing.add(jSeparator4);

        stop.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, InputEvent.ALT_DOWN_MASK));
        stop.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/stop.png"))));
        stop.setText("停止抓包");
        stop.addActionListener(this::stopActionPerformed);
        mCapturing.add(stop);

        jMenuBar1.add(mCapturing);

        mHelp.setText("帮助");
        mHelp.setFont(new Font("Microsoft YaHei UI", Font.PLAIN, 14));

        about.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, InputEvent.ALT_DOWN_MASK));
        about.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/images/about.png"))));
        about.setText("关于...");
        about.addActionListener(e -> JOptionPane.showMessageDialog(null, "仿Wireshark程序\n捕获包种类:TCP、UDP、DNS、ARP、ICMP\n界面参考:董相志，有部分修改\n", "关于仿Wireshark程序...", JOptionPane.INFORMATION_MESSAGE));
        mHelp.add(about);

        jMenuBar1.add(mHelp);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 934, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jToolBar1, GroupLayout.PREFERRED_SIZE, 831, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(lblStatus, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jToolBar1, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblStatus, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }

    /**
     * function:按钮响应事件->更新网卡
     * @param nif 网卡
     */
    public static void updateNif(PcapNetworkInterface nif) {
        MainUI.nif = nif;
    }

    /**
     * function:显示包的信息（内容和二进制信息）
     *
     * @param packet 包
     */
    public void analyzingPacket(Packet packet) {
        analysisTextArea.setText(packet.toString());
        packetBytes.setText("16进制包数据:\n"+PacketInfo.byteArrayToHexString(packet.getRawData()));
    }

    /**
     * function:退出响应事件
     * @param evt 事件
     */
    private void quitActionPerformed(java.awt.event.ActionEvent evt) {
        if (captureThread != null) {
            captureThread.interrupt();
        }
    }

    /**
     * function:程序关闭响应事件
     */
    private void formWindowClosing() {
        if (captureThread != null) {
            captureThread.interrupt();
        }
    }

    /**
     * function:开始抓包
     *
     * @param evt 事件
     */
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        lblStatus.setText("正在捕获数据包，请耐心等候...");
        btnStart.setEnabled(false);
        btnOpenFile.setEnabled(false);
        packetOrder = 0;
        DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(tableModel.getRowCount() - 1);
        }
        table.setModel(tableModel);
        packetTable.reset();

        packetTree=new PacketTree(this,null);
        if (nif == null) {
            showMessage("请先指定网卡！");
            btnStart.setEnabled(true);
            return;
        }

        if (packetCapture == null) {
            packetCapture = new PacketCapture(nif);
            packetCapture.registerListener(packet -> allPackets.addPacket(packet));
            packetCapture.registerListener(packetTable::addTable);
        }

        captureThread = new Thread(() -> {
            try {
                packetCapture.startCapturing();
            } catch (PcapNativeException | NotOpenException | InterruptedException ex) {
                showError(ex);
            }
        });
        captureThread.start();
        btnStop.setEnabled(true);
    }

    /**
     * function:停止按钮响应事件
     *
     * @param evt 事件
     */
    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        btnStop.setEnabled(false);
        btnOpenFile.setEnabled(true);
        try {
            packetCapture.stopCapturing();
            captureThread.interrupt();
            captureThread = null;
        } catch (NotOpenException ex) {
            showError(ex);
        }
        packetCapture = null;
        btnStart.setEnabled(true);
        lblStatus.setText("当前捕获数据包工作已结束！");
    }

    /**
     * function:菜单项，选择网络接口
     *
     * @param evt 事件
     */
    private void setInterfaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setInterfaceActionPerformed
        lblStatus.setText("请选择希望抓包的网络接口...");
        showInterfaceWindow();
    }

    /**
     * function:菜单项，保存文件
     *
     * @param evt 事件
     */
    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            String filePath = path;
            //String filePath = path.contains(".pcap")? path:(path+".pcap");
            Utils.write(filePath,allPackets);
        }
        lblStatus.setText("文件保存完成！");
    }

    /**
     * function:打开文件响应事件->打开文件
     * @param evt 事件
     */
    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {
        packetOrder = 0;
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            this.allPackets = Utils.read(file.getAbsolutePath());
            this.packetTable.loadFilePacket(this.allPackets);
        }
        lblStatus.setText("文件已打开！");
    }

    /**
     * function:打开文件按钮响应事件
     * @param evt 事件
     */
    private void btnOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenFileActionPerformed
        openFileActionPerformed(evt);
    }

    /**
     * function:保存文件按钮响应事件
     * @param evt 事件
     */
    private void btnSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFileActionPerformed
        saveFileActionPerformed(evt);
    }

    /**
     * function:开始按钮响应事件->开始抓包
     * @param evt 事件
     */
    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        btnStartActionPerformed(evt);
    }

    /**
     * function:停止按钮响应事件->停止抓包
     * @param evt 事件
     */
    private void stopActionPerformed(java.awt.event.ActionEvent evt) {
        btnStopActionPerformed(evt);
    }

    /**
     * function：设置过滤规则响应事件
     * @param evt 事件
     */
    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {
        packetTable.setFilter(txtFilter.getText(), allPackets);
        lblStatus.setText("过滤器规则生效...");
    }

    //显示网络接口列表
    private void showInterfaceWindow() {
        JFrame nifWindow = new NetworkInterfaceWindow();
        nifWindow.setLocationRelativeTo(this);
    }

    //正常消息提示
    private void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    /**
     * function:显示错误信息
     * @param e 异常
     */
    private void showError(Throwable e) {
        showMessage("错误消息：" + e.getClass().toString() + ": " + e.getMessage());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        EventQueue.invokeLater(() -> new MainUI().setVisible(true));
    }


    private JMenuItem about;
    private JButton btnFilter;
    private JButton btnOpenFile;
    private JButton btnSaveFile;
    private JButton btnStart;
    private JButton btnStop;
    private JLabel jLabel1;
    private JMenuBar jMenuBar1;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JPopupMenu.Separator jSeparator1;
    private JPopupMenu.Separator jSeparator2;
    private JToolBar.Separator jSeparator3;
    private JPopupMenu.Separator jSeparator4;
    private JPopupMenu.Separator jSeparator5;
    private JToolBar jToolBar1;
    private JLabel lblStatus;
    private JMenu mCapturing;
    private JMenu mFile;
    private JMenu mHelp;
    private JMenuItem openFile;
    public JTextArea packetBytes;
    private JMenuItem quit;
    private JMenuItem saveFile;
    private JMenuItem setInterface;
    private JMenuItem start;
    private JMenuItem stop;
    public JTable table;
    public JTree tree;
    public JTextArea analysisTextArea;
    private JTextField txtFilter;
    private static final String INIT_DIR = "user.home";
}
